<% exclusions = all_exclusions + (type_exclusions[name] || []) %>
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../puppet_x/puppetlabs/swagger/fuzzy_compare'

Puppet::Type.newtype(:<%= namespace %>_<%= name %>) do
  <% if model['description'] %>
  @doc = "<%= model['description'].gsub('"', "'") %>"
  <% end %>

  ensurable

  <% if model['required'] %>
  validate do
    required_properties = [
    <% model['required'].each do |property| %>
      :<%= property.swagger_to_snake_case.to_sym %>,
    <% end %>
    ]
    required_properties.each do |property|
      # We check for both places so as to cover the puppet resource path as well
      if self[property].nil? and self.provider.send(property) == :absent
        fail "You must provide a #{property}"
      end
    end
  end
  <% end %>

  newparam(:name, namevar: true) do
    desc 'Name of the <%= name %>.'
  end
  <% model['properties'].each do |property_name, details| %>
    <% unless exclusions.include? property_name %>
      <% if details['type'] == 'array' %>
      newproperty(:<%= property_name.swagger_to_snake_case %>, :array_matching => :all) do
      <% else %>
      newproperty(:<%= property_name.swagger_to_snake_case %>) do
      <% end %>
        <% if details['description'] %>
        desc "<%= details['description'].gsub('"', "'") %>"
        <% end %>
        def insync?(is)
          PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
        end
      end
    <% end %>
  <% end %>
end
